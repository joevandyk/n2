# http://unicorn.bogomips.org/SIGNALS.html
 
application = "myapp"
rails_env = ENV['RAILS_ENV'] || 'production'
Rails.root = ENV['Rails.root'] || "/data/sites/my_app/current"
 
God::Contacts::Email.message_settings = {
  :from => 'god@example.com'
}

God::Contacts::Email.server_settings = {
  :address => "smtp.example.com",
  :port => 25,
  :domain => "example.com",
  :authentication => :plain,
  :user_name => "john",
  :password => "s3kr3ts"
}

God.contact(:email) do |c|
  c.name = 'tom'
  c.email = 'tom@example.com'
end

God.contact(:email) do |c|
  c.name = 'vanpelt'
  c.email = 'vanpelt@example.com'
  c.group = 'admins'
end

God.contact(:email) do |c|
  c.name = 'kevin'
  c.email = 'kevin@example.com'
  c.group = 'admins'
end

God.watch do |w|
  w.name = "unicorn"
  w.interval = 30.seconds # default
 
  # unicorn needs to be run from the rails root
  w.start = "cd #{Rails.root} && /usr/bin/unicorn_rails -c #{Rails.root}/config/unicorn.conf.rb -E #{rails_env} -D"
 
  # QUIT gracefully shuts down workers
  w.stop = "kill -QUIT `cat #{Rails.root}/tmp/pids/unicorn.pid`"
 
  # USR2 causes the master to re-create itself and spawn a new worker pool
  w.restart = "kill -USR2 `cat #{Rails.root}/tmp/pids/unicorn.pid`"
 
  w.start_grace = 10.seconds
  w.restart_grace = 10.seconds
  w.pid_file = "#{Rails.root}/tmp/pids/unicorn.pid"
 
  w.uid = 'deploy'
  w.gid = 'deploy'
 
  w.behavior(:clean_pid_file)
 
  w.start_if do |start|
    start.condition(:process_running) do |c|
      c.interval = 5.seconds
      c.running = false
	  c.notify = {:contacts => ['admins'], :priority => 1, :category => 'not_running'}
    end
  end
 
  w.restart_if do |restart|
    restart.condition(:memory_usage) do |c|
      c.above = 300.megabytes
      c.times = [3, 5] # 3 out of 5 intervals
	  c.notify = {:contacts => ['admins'], :priority => 1, :category => 'Memory OOB'}
    end
 
    restart.condition(:cpu_usage) do |c|
      c.above = 50.percent
      c.times = 5
	  c.notify = {:contacts => ['admins'], :priority => 1, :category => 'CPU OOB'}
    end
  end
 
  # lifecycle
  w.lifecycle do |on|
    on.condition(:flapping) do |c|
      c.to_state = [:start, :restart]
      c.times = 5
      c.within = 5.minute
      c.transition = :unmonitored
      c.retry_in = 10.minutes
      c.retry_times = 5
      c.retry_within = 2.hours
    end
  end
end

# This will ride alongside god and kill any rogue memory-greedy
# processes. Their sacrifice is for the greater good.

unicorn_worker_memory_limit = 200_000

Thread.new do
  loop do
    begin
      # unicorn workers
      #
      # ps output line format:
      # 31580 275444 unicorn_rails worker[15] -c /data/github/current/config/unicorn.rb -E production -D
      # pid ram command
      # TODO:: add notifications for work restarts

      lines = `ps -e -www -o pid,rss,command | grep '[u]nicorn_rails worker'`.split("\n")
      lines.each do |line|
        parts = line.split(' ')
        if parts[1].to_i > unicorn_worker_memory_limit
	  # tell the worker to die after it finishes serving its request
          ::Process.kill('QUIT', parts[0].to_i)
        end
      end
    rescue Object
     # don't die ever once we've tested this
      nil
    end

    sleep 30
  end
end

# Watch Resque workers
#num_workers = rails_env == 'production' ? 5 : 2
# hardcode to 1 for now
num_workers = 1

num_workers.times do |num|
  God.watch do |w|
    w.name     = "resque-#{application}-#{num}"
    w.group    = 'resque'
    w.interval = 30.seconds
    w.env      = {"QUEUE"=>"*", "RAILS_ENV"=>rails_env}
    w.start    = "/usr/bin/rake -f #{Rails.root}/Rakefile environment resque:work"

    w.uid = 'deploy'
    w.gid = 'deploy'

    # retart if memory gets too high
    w.transition(:up, :restart) do |on|
      on.condition(:memory_usage) do |c|
        c.above = 250.megabytes
        c.times = 2
      end
    end

    # determine the state on startup
    w.transition(:init, { true => :up, false => :start }) do |on|
      on.condition(:process_running) do |c|
        c.running = true
      end
    end

    # determine when process has finished starting
    w.transition([:start, :restart], :up) do |on|
      on.condition(:process_running) do |c|
        c.running = true
        c.interval = 5.seconds
      end

      # failsafe
      on.condition(:tries) do |c|
        c.times = 5
        c.transition = :start
        c.interval = 5.seconds
      end
    end

    # start if process is not running
    w.transition(:up, :start) do |on|
      on.condition(:process_running) do |c|
        c.running = false
      end
    end
  end
end

  God.watch do |w|
    w.name     = "resque-scheduler-#{application}"
    w.group    = 'resque-scheduler'
    w.interval = 30.seconds
    w.env      = {"INITIALIZER_PATH"=>"#{Rails.root}/config/initializers/resque.rb", "RAILS_ENV"=>rails_env}
    w.start    = "/usr/bin/rake -f #{Rails.root}/Rakefile resque:scheduler"
    #w.start    = "/usr/bin/rake -f #{Rails.root}/Rakefile environment resque:work& &> log/resque_worker_#{num}.log && echo $! > tmp/pids/resque_worker_#{num}.pid && echo 0"
    #w.start    = "/usr/bin/rake -f #{Rails.root}/Rakefile environment resque:work &> log/resque_worker_#{num}.log && echo !$ > tmp/pids/resque_worker_#{num}.pid"
    #w.start    = "cd #{Rails.root} && RAILS_ENV=#{rails_env} INTERVAL=1 QUEUES=* rake resque:work &> log/resque_worker_#{num}.log & echo $! > tmp/pids/resque_worker_#{num}.pid"
    #w.pid_file = "#{Rails.root}/tmp/pids/resque_worker_#{num}.pid"

    #w.behavior(:clean_pid_file)

    w.uid = 'deploy'
    w.gid = 'deploy'

    # retart if memory gets too high
    w.transition(:up, :restart) do |on|
      on.condition(:memory_usage) do |c|
        c.above = 250.megabytes
        c.times = 2
      end
    end

    # determine the state on startup
    w.transition(:init, { true => :up, false => :start }) do |on|
      on.condition(:process_running) do |c|
        c.running = true
      end
    end

    # determine when process has finished starting
    w.transition([:start, :restart], :up) do |on|
      on.condition(:process_running) do |c|
        c.running = true
        c.interval = 5.seconds
      end

      # failsafe
      on.condition(:tries) do |c|
        c.times = 5
        c.transition = :start
        c.interval = 5.seconds
      end
    end

    # start if process is not running
    w.transition(:up, :start) do |on|
      on.condition(:process_running) do |c|
        c.running = false
      end
    end
  end
